#!/usr/bin/python
import sys

from subprocess import Popen, PIPE
from collections import defaultdict
from tempfile import mkstemp
from os import fdopen, unlink
from random import random
from argparse import ArgumentParser, FileType, ArgumentTypeError

def git(*args):
    """
        Call git with the arguments, and yield the stdout
    """
    proc = Popen(("git",) + args, stdout=PIPE)
    for line in proc.stdout:
        yield line
    # User will see git error message on stderr
    if proc.wait():
        sys.exit()

def main():
    parser = ArgumentParser(description="""
        git clarity creates graphs of the history of your repository's branches.

        The graph should show you at a glance where different branches begin
        and are merged; allowing you to determine which branches include which
        features and how to plan rebases and merges.

        By default all "named commits" (those pointed at by a ref), "fork
        commits" (those which have more than one child), "merge commits"
        (those which have more than one parent),  "initial commits" (those
        with no parents) and "trailing commits" (those with no children) are
        preserved. All other commits are deleted.
        """, epilog="""

        There are three kinds of nodes in the output graph: 1) Hexagons, which
        represent named (i.e. important) commits; 2) Ovals, which represent
        key commits in the history (i.e. merges and merge-bases); and 3) Circles,
        which represent compressed (by the -c flag) ranges of unimportant merges.
        Within a circle, the last commit is an ancestor of all outgoing arrows,
        and the first commit is a descendant of all incoming arrows.
        """)

    parser.add_argument('-M', '--no-merges', action='store_true',
            help="Don't include commits just because they are merges.")

    parser.add_argument('-F', '--no-forks', action='store_true',
            help="Don't include commits just because they are forks.")

    parser.add_argument('-c', '--compress', action='store_true', help="""
        Compress regions of merge and fork commits that contain
        no other interesting commits. (Experimental)""")

    parser.add_argument('-a', '--all', action='store_true', help="""
        Include all commits, acts like `git-graphviz`
        (cannot be used with any --no-* option or --compress)""")

    parser.add_argument('-T', '--format', default='pdf', help="""
        The output format (default: pdf), raw can be used to get the input
        to graphviz, for other valid options consult `dot -T?`""")

    parser.add_argument('-o', '--output', action='store',
            type=FileType('w'), nargs='?', default=sys.stdout,
            help="for other valid options consult `dot -T?`")

    parser.add_argument('log_args', nargs='*', help="""
        Arguments to be passed to git-log. This allows you
        to construct smaller graphs by filtering on reachability or date.
        To pass flags to git-log, separate them from git-clarity arguments
        with --. For example, to see only branches merged into
        master, try `git clarity master`.""")

    opts = parser.parse_args(sys.argv[1:])

    if (opts.no_merges or opts.no_forks or opts.compress) and opts.all:
        raise ArgumentTypeError("It doesn't make sense to ask for --all with --no-merges, --no-forks or --compress")

    no_initial = no_trailing = False

    parents = defaultdict(set)
    children = defaultdict(set)
    refnames = {}
    interesting = set()
    topo_order = []

    # Read entire graph
    args = ("--format=format:%H|%P|%d", "--topo-order") + tuple(opts.log_args)

    for line in git("log", *args):

        child, commits, desc = line.strip().split("|")

        # Make "named commits" interesting
        if desc:
            refnames[child] = desc.strip().replace(" ", "\\n")
            interesting.add(child)

        topo_order.append(child)

        if commits:
            for parent in commits.split(" "):
                parents[child].add(parent)
                children[parent].add(child)

    # Make "initial commits" interesting
    for parent in children.keys():
        if not parents[parent]:
            interesting.add(parent)

    # Make "trailing commits" interesting
    for child in parents.keys():
        if not children[child]:
            interesting.add(child)


    def delete_normal():
        """
            Remove nodes from the graph when they give no useful information.
            (i.e. they are not forks, merges, named, etc.)

            This is called recursively, perhaps it shouldn't be, as this causes
            simple fork<->merges to disappear magically:

            x--o--o    ->  x--o       -> x--x
               |  |              \
               o--o--x            o--x 

             This doesn't help with more complex examples:

             x--o--o
                |  | \
                o--+--o
                 \ |  |
                   o--o--x
        """
        size = 0
        while size != len(parents) + len(children):
            size = len(parents) + len(children)

            for commit in parents.keys():
                if ((opts.no_merges or len(parents[commit]) == 1) and
                        (opts.no_forks or len(children[commit]) == 1) and
                            (commit not in interesting)):

                    for parent in parents[commit]:
                        for child in children[commit]:
                            children[parent].discard(commit)
                            children[parent].add(child)
                            parents[child].discard(commit)
                            parents[child].add(parent)

                    del parents[commit], children[commit]

    def unify_compress():
        """
            This deals with the situation where a branch has been merged in multiple times

                x
                | \
             x--o--o--x

             It's not really necessary to show both merge commits, just that the branch was
             merged between the first and the second (some number of times).

             The node label tries to signify this, not sure how clear it is though.

             The idea is that nodes which can reach the same interesting ancestors and interesting
             children (by transitive parent and child relationships) contain no new information.

             NOTE: I am convinced there's a bug here, because doing this multiple times shouldn't
             make a difference.
        """
        size = 0
        while size != len(parents) + len(children):
            delete_normal()
            size = len(parents) + len(children)

            ancestors = defaultdict(set)
            descendants = defaultdict(set)

            for commit in reversed(topo_order):
                if commit in parents:
                    for parent in parents[commit]:
                        ancestors[commit].update(ancestors[parent])
                        if parent in interesting:
                            ancestors[commit].add(parent)
                else:
                    # Ensure that different initial nodes are treated differently.
                    # (despite otherwise sharing the same, empty, ancestor set)
                    ancestors[commit].add(random())

            for commit in topo_order:
                if commit in children:
                    for child in children[commit]:
                        descendants[commit].update(descendants[child])
                        if child in interesting:
                            descendants[commit].add(child)
                else:
                    descendants[commit].add(random())

            inverse = defaultdict(list)
            for commit in topo_order:
                inverse[frozenset(descendants[commit]), frozenset(ancestors[commit])].append(commit)

            for commits in inverse.values():
                if len(commits) > 1:
                    result = commits[-1][:6] + "\\n..\\n" + commits[0][:6]
                    refnames[result] = result
                    for commit in commits:
                        if not commit in interesting:
                            if commit in parents:
                                for parent in parents[commit]:
                                    children[parent].discard(commit)
                                    if parent != result:
                                        children[parent].add(result)
                                        parents[result].add(parent)
                                del parents[commit]

                            if commit in children:
                                for child in children[commit]:
                                    parents[child].discard(commit)
                                    if child != result:
                                        parents[child].add(result)
                                        children[result].add(child)
                                del children[commit]
            # Tidy up any newly created single-parent, single-child commits.
            delete_normal()

    if not opts.all:
        if opts.compress:
            unify_compress()
        else:
            delete_normal()

    # Extract list of edges from graph
    edges = []
    for child in parents:
        for parent in parents[child]:
            edges.append([parent, child])

    # Format as graphviz input.
    name = lambda commit: refnames[commit] if commit in refnames else commit[0:10]

    result = ["digraph G {"]
    result += [('"%s" -> "%s"' % tuple(map(name,edge))) for edge in edges]
    result += ['"%s" [style=bold, shape=hexagon]' % refname for refname in refnames.values() if ".." not in refname]
    result += ["}",""]
    result = "\n".join(result)

    # Output
    if opts.format == "raw":
        opts.output.write(result)
    else:
        Popen(["dot", "-T" + opts.format], stdin=PIPE, stdout=opts.output).communicate(result)

if __name__ == "__main__":
    main()
